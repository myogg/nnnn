<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://loji44.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://loji44.github.io/" rel="alternate" type="text/html" /><updated>2022-01-18T15:22:23+00:00</updated><id>https://loji44.github.io/feed.xml</id><title type="html">Blog · Loji44</title><entry><title type="html">pip/pip3配置国内源，为Python包的安装加速</title><link href="https://loji44.github.io/2022/01/16/pip-config.html" rel="alternate" type="text/html" title="pip/pip3配置国内源，为Python包的安装加速" /><published>2022-01-16T09:20:02+00:00</published><updated>2022-01-16T09:20:02+00:00</updated><id>https://loji44.github.io/2022/01/16/pip-config</id><content type="html" xml:base="https://loji44.github.io/2022/01/16/pip-config.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">midkr ~/.pip &amp;&amp; vim ~/.pip/pip.conf</code>编辑pip配置文件，加入以下内容：</p>

<pre><code class="language-txt">[global]
timeout=60
index-url=https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p>更多配置项可以参考官网配置说明：<a href="https://pip.pypa.io/en/stable/topics/configuration" target="_blank">https://pip.pypa.io/en/stable/topics/configuration</a></p>

<p>国内可选pip源：</p>

<ul>
  <li>清华大学镜像：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
  <li>阿里云源：<a href="http://mirrors.aliyun.com/pypi/simple" target="_blank">http://mirrors.aliyun.com/pypi/simple</a></li>
  <li>豆瓣软件源：<a href="http://pypi.douban.com/simple" target="blank">http://pypi.douban.com/simple<a></a></a></li>
  <li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple" target="_blank">https://pypi.mirrors.ustc.edu.cn/simple</a></li>
  <li>华中理工大学：<a href="http://pypi.hustunique.com" target="_blank">http://pypi.hustunique.com</a></li>
  <li>山东理工大学：<a href="http://pypi.sdutlinux.org" target="_blank">http://pypi.sdutlinux.org</a></li>
</ul>

<hr />

<p>参考：</p>
<ul>
  <li><a href="https://pip.pypa.io/en/stable/topics/configuration" target="_blank">https://pip.pypa.io/en/stable/topics/configuration</a></li>
  <li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank">清华大学开源软件镜像站：pypi 镜像使用帮助</a></li>
</ul>]]></content><author><name></name></author><category term="Python" /><summary type="html"><![CDATA[midkr ~/.pip &amp;&amp; vim ~/.pip/pip.conf编辑pip配置文件，加入以下内容：]]></summary></entry><entry><title type="html">树莓派4B上使用Docker安装MySQL</title><link href="https://loji44.github.io/2022/01/06/install-mysql-on-raspberrypi-with-docker.html" rel="alternate" type="text/html" title="树莓派4B上使用Docker安装MySQL" /><published>2022-01-06T14:43:59+00:00</published><updated>2022-01-06T14:43:59+00:00</updated><id>https://loji44.github.io/2022/01/06/install-mysql-on-raspberrypi-with-docker</id><content type="html" xml:base="https://loji44.github.io/2022/01/06/install-mysql-on-raspberrypi-with-docker.html"><![CDATA[<p>树莓派4B属于ARM架构，想要在上面安装MySQL，必须选择适配ARM平台的MySQL Docker镜像。MySQL官方出了一个可以在ARM平台上运行的镜像：<a href="https://registry.hub.docker.com/r/mysql/mysql-server" target="_blank">https://registry.hub.docker.com/r/mysql/mysql-server</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker pull mysql/mysql-server:8.0.27-aarch64
</code></pre></div></div>

<p>这里使用Docker-compose运行，编辑<code class="language-plaintext highlighter-rouge">docker-compose.yaml</code>内容如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">mysql-server</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql/mysql-server:8.0.27-aarch64</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql-server</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">root_pass</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">/xxx/docker/volumes/mysql-server/data:/var/lib/mysql"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
</code></pre></div></div>

<p>启动MySQL docker容器：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker-compose up <span class="nt">-d</span> mysql-server
</code></pre></div></div>

<p>使用命令<code class="language-plaintext highlighter-rouge">docker logs -f mysql-server</code>查看MySQL服务器日志，看到<code class="language-plaintext highlighter-rouge">ready for connections</code>字样就说明成功运行起来了。MySQL默认仅支持本地<code class="language-plaintext highlighter-rouge">localhost</code>连接，需要设置MySQL开启支持远程连接，步骤如下。</p>

<p>执行<code class="language-plaintext highlighter-rouge">docker exec -ti mysql-server bash</code>命令进入MySQL容器中，然后使用<code class="language-plaintext highlighter-rouge">mysql</code>命令连接MySQL：<code class="language-plaintext highlighter-rouge">mysql -h localhost -P 3306 -u root -proot_pass</code>。成功连接上后，给root用户授权远程连接：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; USE mysql<span class="p">;</span>
Reading table information <span class="k">for </span>completion of table and column names
You can turn off this feature to get a quicker startup with <span class="nt">-A</span>

Database changed
mysql&gt; SELECT user, host FROM user<span class="p">;</span>
+------------------+-----------+
| user             | host      |
+------------------+-----------+
| healthchecker    | localhost |
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
| root             | localhost |
+------------------+-----------+
5 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.00 sec<span class="o">)</span>

mysql&gt; UPDATE user SET <span class="nv">host</span><span class="o">=</span><span class="s1">'%'</span> WHERE user <span class="o">=</span> <span class="s1">'root'</span><span class="p">;</span>
Query OK, 1 row affected <span class="o">(</span>0.02 sec<span class="o">)</span>

mysql&gt; SELECT user, host FROM user<span class="p">;</span>
+------------------+-----------+
| user             | host      |
+------------------+-----------+
| root             | %         |
| healthchecker    | localhost |
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
+------------------+-----------+
5 rows <span class="k">in </span><span class="nb">set</span> <span class="o">(</span>0.01 sec<span class="o">)</span>

mysql&gt; FLUSH PRIVILEGES<span class="p">;</span>
Query OK, 0 rows affected <span class="o">(</span>0.02 sec<span class="o">)</span>
</code></pre></div></div>

<p>成功执行<code class="language-plaintext highlighter-rouge">UPDATE user SET host='%' WHERE user = 'root';</code>之后记得执行<code class="language-plaintext highlighter-rouge">FLUSH PRIVILEGES;</code>刷新权限！</p>

<p>MySQL8之后，用户管理和权限管理跟之前版本命令的使用方式有所不同，参考官方说明：<a href="https://dev.mysql.com/doc/refman/8.0/en/grant.html" target="_blank">https://dev.mysql.com/doc/refman/8.0/en/grant.html</a></p>

<hr />

<p>参考：</p>

<ul>
  <li><a href="https://dev.mysql.com/doc/refman/8.0/en/grant.html" target="_blank">https://dev.mysql.com/doc/refman/8.0/en/grant.html</a></li>
  <li><a href="https://www.cnblogs.com/dongxt/p/14883465.html" target="_blank">MySQL8.0以上版本创建用户并授权远程连接</a></li>
</ul>]]></content><author><name></name></author><category term="树莓派" /><category term="MySQL" /><category term="Docker" /><summary type="html"><![CDATA[树莓派4B属于ARM架构，想要在上面安装MySQL，必须选择适配ARM平台的MySQL Docker镜像。MySQL官方出了一个可以在ARM平台上运行的镜像：https://registry.hub.docker.com/r/mysql/mysql-server]]></summary></entry><entry><title type="html">Windows迟滞键后门sethc.exe</title><link href="https://loji44.github.io/2021/08/17/sethc.exe.html" rel="alternate" type="text/html" title="Windows迟滞键后门sethc.exe" /><published>2021-08-17T04:09:20+00:00</published><updated>2021-08-17T04:09:20+00:00</updated><id>https://loji44.github.io/2021/08/17/sethc.exe</id><content type="html" xml:base="https://loji44.github.io/2021/08/17/sethc.exe.html"><![CDATA[<p><code class="language-plaintext highlighter-rouge">sethc.exe</code>是Windows的迟滞键执行程序，即连续按下5次<code class="language-plaintext highlighter-rouge">shift</code>键之后，会弹出迟滞键弹窗：</p>

<p><img src="/static/image/2021/shift5.jpg" alt="shift5.jpg" /></p>

<p>这个迟滞键往往会被利用进行一些不安全的入侵操作，例如修改登录密码。利用“启动修复”功能，就可以将<code class="language-plaintext highlighter-rouge">cmd.exe</code>命令控制台程序替换成<code class="language-plaintext highlighter-rouge">sethc.exe</code>，这样在登录窗口就可以连续按下5次<code class="language-plaintext highlighter-rouge">shift</code>键，调出命令控制台，继而通过<code class="language-plaintext highlighter-rouge">net user new_pass</code>修改用户登录密码。</p>

<p>这类后门的原理是通过将<code class="language-plaintext highlighter-rouge">cmd.exe</code>重命名成其他快捷键等方式执行程序，例如上述例子说的，将<code class="language-plaintext highlighter-rouge">cmd.exe</code>重命名成<code class="language-plaintext highlighter-rouge">sethc.exe</code>来欺骗操作系统，调出命令控制台进而修改登录密码。所以应对方式就是禁用或者对一些快捷键进行权限配置，可以参考：<a href="https://baike.baidu.com/item/sethc.exe/249570" target="_blank">https://baike.baidu.com/item/sethc.exe/249570</a></p>

<hr />

<p>延伸阅读：<a href="https://www.zhihu.com/question/29748629/answer/646431616" target="_blank">迟滞键是谁发明的？</a> 这里摘抄一部分：</p>

<p>“粘滞键是80年代初发明的，当时叫 1-Finger，顾名思义初衷是帮助只有「一根手指」的用户。比如键入「@」，需要同时按住 Shift 和 2，这时候粘滞键就可以起作用了。当然，这个功能帮助到的人群远不止「一根手指」。有个天生双臂缺失的大爷给我演示过，他是怎么用电脑的，粘滞键发明前他是怎么解决 Ctrl Shift 这些功能键的：他嘴里咬一根木棍儿，一头缠几圈橡皮筋——这是他操作电脑唯一的工具；然后他让家人帮他把5个一美分硬币摞在一起，用透明胶缠住，一坨硬币的一面再缠上一个小铁环，让木棍儿的橡皮头刚好可以穿过。需要按住 Shift 的时候，用木棍儿把一坨硬币吊到 Shift 上，重量刚好可以把键按下，再去按别的键，用完再把硬币吊走。”</p>

<hr />]]></content><author><name></name></author><category term="Windows" /><summary type="html"><![CDATA[sethc.exe是Windows的迟滞键执行程序，即连续按下5次shift键之后，会弹出迟滞键弹窗：]]></summary></entry><entry><title type="html">使用jekyll-archives插件自动生成文章归档页面</title><link href="https://loji44.github.io/2021/08/05/jekyll-archives-plugin.html" rel="alternate" type="text/html" title="使用jekyll-archives插件自动生成文章归档页面" /><published>2021-08-05T07:00:00+00:00</published><updated>2021-08-05T07:00:00+00:00</updated><id>https://loji44.github.io/2021/08/05/jekyll-archives-plugin</id><content type="html" xml:base="https://loji44.github.io/2021/08/05/jekyll-archives-plugin.html"><![CDATA[<p>在做 <a href="https://github.com/loji44/ExSimple" target="_blank">ExSimple</a> 博客主题的时候，被一个问题困扰了一天：如何自动根据标签<code class="language-plaintext highlighter-rouge">tag</code>自动生成页面，因为写文章的时候会随时新增新的标签。我如何能在新增<code class="language-plaintext highlighter-rouge">tag</code>的时候，自动生成<code class="language-plaintext highlighter-rouge">tag</code>下面的所有文章列表页面？</p>

<p>首先我已经写了<code class="language-plaintext highlighter-rouge">tag_post_list.html</code>这个layout，结合<a href="https://github.com/jekyll/jekyll-archives" target="https://github.com/jekyll/jekyll-archives">jekyll-archives</a>插件自动根据tag生成文章归档页面。<code class="language-plaintext highlighter-rouge">_config.yml</code>配置如下：</p>

<pre><code class="language-txt">plugins:
  - jekyll-archives
jekyll-archives:
  enabled: ['tags']
  layout: tag_post_list
  permalinks:
    tag: '/tags/:name.html'
</code></pre>

<p>在执行<code class="language-plaintext highlighter-rouge">bundle install &amp;&amp; jekyll build</code>生成博客静态资源文件时，就会根据tag归档生成归档页面，生成归档html页面所存放的路径为<code class="language-plaintext highlighter-rouge">_site/tags/</code>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>loji44@Ubuntu:~/i44/_site/tags<span class="nv">$ </span>tree
<span class="nb">.</span>
├── arthas.html
├── auth.html
├── docker.html
├── dubbo.html
├── iterm2.html
├── java.html
├── jekyll.html
├── linux.html
├── macos.html
├── mybatis.html
├── mysql.html
├── python.html
├── redis.html
├── spi.html
├── spring.html
├── sso.html
├── windows.html
├── 博客.html
├── 图片.html
├── 工具集.html
└── 树莓派.html
</code></pre></div></div>

<hr />]]></content><author><name></name></author><category term="博客" /><category term="Jekyll" /><summary type="html"><![CDATA[在做 ExSimple 博客主题的时候，被一个问题困扰了一天：如何自动根据标签tag自动生成页面，因为写文章的时候会随时新增新的标签。我如何能在新增tag的时候，自动生成tag下面的所有文章列表页面？]]></summary></entry><entry><title type="html">Java运行时利用反射获取方法的参数名称</title><link href="https://loji44.github.io/2021/01/04/java-reflection-get-method-parameter-real-name.html" rel="alternate" type="text/html" title="Java运行时利用反射获取方法的参数名称" /><published>2021-01-04T08:55:34+00:00</published><updated>2021-01-04T08:55:34+00:00</updated><id>https://loji44.github.io/2021/01/04/java-reflection-get-method-parameter-real-name</id><content type="html" xml:base="https://loji44.github.io/2021/01/04/java-reflection-get-method-parameter-real-name.html"><![CDATA[<p>JDK1.8之前，我们通过反射获取一个方法定义的参数名称时，无法获取到真实的参数名称，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">func</span><span class="o">(</span><span class="nc">String</span> <span class="n">nickName</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"something to be return"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在类编译之后，类的方法参数名称会丢失，通过反射机制获取到的参数名称变成了<code class="language-plaintext highlighter-rouge">arg0</code>、<code class="language-plaintext highlighter-rouge">arg1</code>这样的。有些场景例如MyBatis这种通过反射来获取Mapper接口上方法参数然后映射到XML的SQL语句上，就没法直接用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SomeMapper</span> <span class="o">{</span>
    <span class="nc">SomePojo</span> <span class="nf">selectOne</span><span class="o">(</span><span class="nc">String</span> <span class="n">nickName</span><span class="o">,</span> <span class="nc">String</span> <span class="n">mobile</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>XML文件如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"selectOne"</span> <span class="na">resultMap=</span><span class="s">"resultMap"</span><span class="nt">&gt;</span>
    SELECT * FROM `some_table` WHERE nick_name = #{nickName} AND mobile = #{mobile};
<span class="nt">&lt;/select&gt;</span>
</code></pre></div></div>

<p>MyBatis通过反射获取到的参数名称其实是：<code class="language-plaintext highlighter-rouge">nickName -&gt; arg0</code>、<code class="language-plaintext highlighter-rouge">mobile -&gt; arg1</code> 这样就没法正确映射到XML的SQL中<code class="language-plaintext highlighter-rouge">#{nickName}</code>、<code class="language-plaintext highlighter-rouge">#{mobile}</code>。</p>

<p>所以需要使用<code class="language-plaintext highlighter-rouge">@Param</code>注解来告诉MyBatis参数的真实名称，MyBatis才能正确映射参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SomeMapper</span> <span class="o">{</span>
    <span class="nc">SomePojo</span> <span class="nf">selectOne</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"nickName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">nickName</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"mobile"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">mobile</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JDK1.8之后，除了通过在参数上打注解的方式，Java原生的反射机制新增了一个类用于描述方法上的参数：<code class="language-plaintext highlighter-rouge">java.lang.reflect.Parameter</code>。我们可以直接通过这个反射类获取到方法参数的真实名称。</p>

<p>前提是我们需要在编译的时候加入<code class="language-plaintext highlighter-rouge">-parameter</code>参数，让编译器在编译类的时候将方法的参数名称也打包到<code class="language-plaintext highlighter-rouge">.class</code>文件里面。默认情况下<code class="language-plaintext highlighter-rouge">-parameter</code>是关闭的，如果需要此功能，需要手动开启：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;compilerArgs&gt;</span>
            <span class="nt">&lt;compilerArg&gt;</span>-parameters<span class="nt">&lt;/compilerArg&gt;</span>
        <span class="nt">&lt;/compilerArgs&gt;</span>
    <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>这样之后，就算我们不在参数上打<code class="language-plaintext highlighter-rouge">@Param</code>注解，MyBatis也能获取到真实的参数名称<code class="language-plaintext highlighter-rouge">nickName</code>和<code class="language-plaintext highlighter-rouge">mobile</code>。</p>

<hr />

<p>参考：</p>

<ul>
  <li><a href="https://www.cnblogs.com/kancy/p/10205036.html" target="_blank">https://www.cnblogs.com/kancy/p/10205036.html</a></li>
  <li><a href="https://blog.csdn.net/xiewenfeng520/article/details/102515413" target="_blank">https://blog.csdn.net/xiewenfeng520/article/details/102515413</a></li>
  <li><a href="https://www.jianshu.com/p/4f1f7a9d595f" target="_blank">https://www.jianshu.com/p/4f1f7a9d595f</a></li>
</ul>]]></content><author><name></name></author><category term="Java" /><summary type="html"><![CDATA[JDK1.8之前，我们通过反射获取一个方法定义的参数名称时，无法获取到真实的参数名称，例如：]]></summary></entry><entry><title type="html">Spring事务为何没有生效？</title><link href="https://loji44.github.io/2020/09/04/spring-transaction-does-not-work.html" rel="alternate" type="text/html" title="Spring事务为何没有生效？" /><published>2020-09-04T03:36:26+00:00</published><updated>2020-09-04T03:36:26+00:00</updated><id>https://loji44.github.io/2020/09/04/spring-transaction-does-not-work</id><content type="html" xml:base="https://loji44.github.io/2020/09/04/spring-transaction-does-not-work.html"><![CDATA[<p>最近在Review业务方的代码时发现使用了Spring事务：func方法中调用了save方法</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">PojoDO</span> <span class="nf">func</span><span class="o">(</span><span class="nc">PojoDTO</span> <span class="n">pojoDTO</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span> 
    <span class="k">return</span> <span class="nf">save</span><span class="o">(</span><span class="n">pojoDTO</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>save方法是一个事务方法，打了<code class="language-plaintext highlighter-rouge">@Transactional</code>注解：期望发生异常时自动回滚数据库</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">PojoDO</span> <span class="nf">save</span><span class="o">(</span><span class="nc">PojoDTO</span> <span class="n">pojoDTO</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">some</span> <span class="n">db</span> <span class="n">ops</span> <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>先给出结论：在func方法中直接通过调用save方法的方式，会导致save方法的事务不生效，发生异常时也不会回滚。这种事务方法的调用方式是错误的。</p>

<h5 id="为什么事务会失效">为什么事务会失效？</h5>

<p>首先要知道，Spring事务本质就是通过动态代理给我们的事务方法织入异常处理的逻辑，并在发生异常时执行<code class="language-plaintext highlighter-rouge">ROLLBACK</code>回滚数据库状态。例如我们有个OrderService接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>
    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span> <span class="n">some</span> <span class="n">db</span> <span class="n">ops</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring在启动的时候扫描到<code class="language-plaintext highlighter-rouge">@Service</code>注解，会为类创建实例对象并加入到IoC容器中。但是由于Spring扫描到OrderServiceImpl的createOrder方法上有<code class="language-plaintext highlighter-rouge">@Transactional</code>注解，于是Spring框架知道这是一个事务方法，所以会为OrderServiceImpl生成一个代理类来拦截OrderServiceImpl中的所有方法并将该代理类实例添加到IoC容器中。</p>

<p>所以我们在<code class="language-plaintext highlighter-rouge">@Autowired</code>这个OrderService的时候，实际上拿到的是OrderServiceImpl的代理类的实例，而不是OrderServiceImpl类的实例：</p>

<p><img src="/static/image/2020-09/proxy-instance.png" alt="proxy-instance.png" /></p>

<p>因为createOrder上有<code class="language-plaintext highlighter-rouge">@Transactional</code>注解，所以Spring在代理类中对这个方法进行了增强：在反射调用invoke进行<code class="language-plaintext highlighter-rouge">try...catch</code>，并在catch到异常的时候进行数据库<code class="language-plaintext highlighter-rouge">ROLLBACK</code>操作。</p>

<p>所以Spring事务的是否生效，取决于我们是否是通过「代理类的对象实例」来进行方法的调用。例如最上面提到的例子，直接在<code class="language-plaintext highlighter-rouge">func</code>方法中调用了事务方法<code class="language-plaintext highlighter-rouge">save</code>，这种调用方式是不会走代理调用的，所以事务也根本不会生效。我们应该通过<code class="language-plaintext highlighter-rouge">xxxService.method</code>这种调用方式，才能使事务生效：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">orderService</span><span class="o">.</span><span class="na">createOrder</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span> <span class="n">some</span> <span class="n">db</span> <span class="n">ops</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为<code class="language-plaintext highlighter-rouge">@Autowired private OrderService orderService;</code>注入的是代理类对象，所以在使用<code class="language-plaintext highlighter-rouge">orderService.createOrder()</code>调用时能正确走到事务的逻辑。</p>

<p>除了<code class="language-plaintext highlighter-rouge">xxxService.method</code>这种调用方式，我们也可以通过<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>注解，将代理类暴露到ThreadLocal中，然后通过<code class="language-plaintext highlighter-rouge">AopContext.currentProxy()</code>来获取当前类的代理对象：</p>

<p><img src="/static/image/2020-09/enableAspectJAutoProxy.png" alt="enableAspectJAutoProxy.png" />
<img src="/static/image/2020-09/aop-context.png" alt="aop-context.png" /></p>

<p><strong>但是注意，<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy(exposeProxy = true)</code>不能保证一定能够正确工作：</strong></p>

<p><img src="/static/image/2020-09/EnableAspectJAutoProxy-exposeProxy.png" alt="EnableAspectJAutoProxy-exposeProxy.png" /></p>

<p>如果直接调用<code class="language-plaintext highlighter-rouge">createOrder()</code>就没有走代理，直接走的普通方法调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">createOrder</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span> <span class="n">some</span> <span class="n">db</span> <span class="n">ops</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样一来，Spring的事务就失效了。没有正确走代理调用是Spring事务不起作用的情况之一。</p>

<p>我们在使用Spring事务的时候，想要使Spring事务正常工作，可能还需要注意以下几点：</p>

<ul>
  <li>包含<code class="language-plaintext highlighter-rouge">@Transactional</code>注解的类必须要被Spring IoC容器管理，否则Spring没法扫描到该Bean为其生成代理类；</li>
  <li>要为数据源配置「事务管理器」：PlatformTransactionManager；</li>
  <li>要确保我们的数据库操作的表是支持事务的，例如InnoDB支持事务，而MyISAM的数据表就不支持事务；</li>
  <li>方法的异常不能自己try…catch消化掉，否则Spring事务没法感知到你的方法抛了异常，也就不会回滚；</li>
  <li>事务的rollbackFor异常类型配置错误，例如配置rollbackFor=SQLException.class，但是你在方法中却抛出BuzzException.class异常，异常类型不匹配也无法让Spring事务感知到；</li>
  <li>Spring事务传播机制要配置正确，例如：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Test</span> <span class="n">test</span><span class="o">;</span>

    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRED</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">test</span><span class="o">.</span><span class="na">method2</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">NOT_SUPPORTED</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method2</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">..</span> <span class="n">some</span> <span class="n">db</span> <span class="n">ops</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>method2的事务传播机制是<code class="language-plaintext highlighter-rouge">Propagation.NOT_SUPPORTED</code>，即不支持事务。如果当前存在事务，它会挂起当前事务，并以非事务的方式执行method2。执行完method2再恢复method1的事务。在这个例子中，method2就不会以事务方式执行，发生异常也不会回滚method2中涉及到的数据库操作。</p>

<hr />]]></content><author><name></name></author><category term="Java" /><category term="Spring" /><summary type="html"><![CDATA[最近在Review业务方的代码时发现使用了Spring事务：func方法中调用了save方法 @Override public PojoDO func(PojoDTO pojoDTO) { ... return save(pojoDTO); }]]></summary></entry><entry><title type="html">Redis缓存雪崩/穿透/击穿</title><link href="https://loji44.github.io/2020/07/30/redis-caching-problems.html" rel="alternate" type="text/html" title="Redis缓存雪崩/穿透/击穿" /><published>2020-07-30T04:09:20+00:00</published><updated>2020-07-30T04:09:20+00:00</updated><id>https://loji44.github.io/2020/07/30/redis-caching-problems</id><content type="html" xml:base="https://loji44.github.io/2020/07/30/redis-caching-problems.html"><![CDATA[<h3 id="1-redis缓存雪崩">1. Redis缓存雪崩</h3>

<p>当缓存服务器宕机或者大量缓存key同时（或者说集中在某个时间段）过期了，大量的请求会在短时间内直接打到DB上，导致DB压力过大，严重的可能会造成DB挂掉。这种情况叫做缓存雪崩。</p>

<p>针对Redis缓存雪崩，解决方案如下：</p>

<ol>
  <li>生产环境避免单机Redis，做集群高可用，主从+哨兵，Redis cluster，避免缓存全线崩盘。</li>
  <li>Redis开启持久化，发生宕机重启之后快速恢复数据。</li>
  <li>采用多级缓存：本地缓存 + hystrix限流&amp;降级，避免一级Redis缓存不可用导致DB被压垮。请求进来先查本地缓存，本地缓存没命中再查Redis，两级缓存都没有再查DB。同时还可以针对服务接口能力做限流&amp;降级处理，如果请求QPS超过了服务接口本身所能承受的数量，走服务降级，例如直接返回一些默认值、友好提示或者空白页面等。</li>
  <li>针对大量缓存key同时过期的情况，简单的做法就是在每个key基础过期时间之上加一个随机值，例如1~5分钟的随机时间，让key的过期时间尽量分散。</li>
</ol>

<h3 id="2-redis缓存击穿">2. Redis缓存击穿</h3>

<p>某个非常热点的key，访问非常频繁，处于高并发访问的情况。在这个key过期的瞬间，大量请求直接打到DB上造成DB压力很大。这种情况叫做缓存击穿。</p>

<p>针对Redis缓存击穿，解决方案如下：</p>

<ol>
  <li>对load DB的操作加互斥锁（mutex），保证只有一个线程去查数据库并将数据更新到缓存中。其他请求进来，抢不到锁可以循环等待一段时间再重试。</li>
  <li>热点数据设置永不过期。永不过期可以有两层意思：「物理」不过期，实际没有设置过期时间；「逻辑」不过期，redis设置某个key的时候不设置过期时间，但是会通过另一个timeKey来维护这个key的过期时间。每次查询key都会先查询timeKey，如果发现快过期或者已过期，就通过后台线程去更新这个value。这种做法可能会存在短暂的数据不一致，但是可以做得“很平滑”，不会阻塞用户请求，用户体验很好。</li>
</ol>

<h3 id="3-redis缓存穿透">3. Redis缓存穿透</h3>

<p>缓存穿透是指请求一些一定不存在的key，请求会直接打到DB上。有些人利用这些系统中不存在的key进行恶意请求攻击。解决方案如下：</p>

<ol>
  <li>采用布隆过滤器对系统中所有数据哈希到一个足够大的bitmap中，Redis的bitmap数据结构就很合适。请求进来会先经过布隆过滤器，过滤掉一些恶意请求。</li>
  <li>采用空值缓存：如果缓存没命中，再去查询DB，DB也没命中说明数据库中不存在这条数据。这时可以构建一个空值保存到缓存中，设置一个较小的过期时间（例如5分钟），这样可以有效过滤恶意请求，保护DB。</li>
</ol>

<hr />]]></content><author><name></name></author><category term="Redis" /><summary type="html"><![CDATA[1. Redis缓存雪崩]]></summary></entry><entry><title type="html">无网络环境下使用阿里arthas诊断工具</title><link href="https://loji44.github.io/2020/07/27/arthas-run-without-network.html" rel="alternate" type="text/html" title="无网络环境下使用阿里arthas诊断工具" /><published>2020-07-27T07:20:00+00:00</published><updated>2020-07-27T07:20:00+00:00</updated><id>https://loji44.github.io/2020/07/27/arthas-run-without-network</id><content type="html" xml:base="https://loji44.github.io/2020/07/27/arthas-run-without-network.html"><![CDATA[<p>最近排查一个线上问题，有个第三方公司服务启动后，访问的时候总是报数据库连接失败。由于是第三方服务，没法增加一些日志进行观察，所以使用阿里的arthas在线诊断工具进行排查。服务部署在客户的机房中，不允许连接外部网络，所以手动下载<code class="language-plaintext highlighter-rouge">arthas-boot.jar</code>并通过<code class="language-plaintext highlighter-rouge">scp</code>方式上传到目标机器的方式去运行。</p>

<p>根据<a href="https://alibaba.github.io/arthas/install-detail.html" target="_blank">arthas官网安装教程</a>，下载<code class="language-plaintext highlighter-rouge">arthas-boot.jar</code>，然后<code class="language-plaintext highlighter-rouge">scp</code>上传到目标主机（客户的机器）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-O</span> https://alibaba.github.io/arthas/arthas-boot.jar
<span class="nv">$ </span>scp <span class="nt">-rp</span> arthas-boot.jar appweb@192.168.100.4:/appweb/
</code></pre></div></div>

<p>执行<code class="language-plaintext highlighter-rouge">java -jar arthas-boot.jar</code>，运行结果如下图所示：</p>

<p><img src="/static/image/2020/arthas-run.png" alt="arthas-run" /></p>

<p>原来<code class="language-plaintext highlighter-rouge">arthas-boot.jar</code>并不是全量包，它会在启动的时候先去阿里Maven仓库下载一些jar包依赖；如果Maven下载失败，那么它会检查本地是否有jar包依赖文件，例如图中的日志：</p>

<p><code class="language-plaintext highlighter-rouge">[ERROR] Can not find Arthas under local: /root/.arthas/lib</code></p>

<p>所以解决方案可以这样：在我的机器上（可联外网），先运行<code class="language-plaintext highlighter-rouge">java -jar arthas-boot.jar</code>下载得到一个<code class="language-plaintext highlighter-rouge">.arthars</code>文件夹，里面存放的就是arthas-boot.jar所需的一些jar包依赖。<code class="language-plaintext highlighter-rouge">.arthars</code>文件夹会默认在用户主目录下生成。</p>

<p>最后将<code class="language-plaintext highlighter-rouge">.arthas</code>文件夹也<code class="language-plaintext highlighter-rouge">scp</code>传送到客户的目标机器，即可完成。</p>

<hr />]]></content><author><name></name></author><category term="Java" /><category term="Arthas" /><summary type="html"><![CDATA[最近排查一个线上问题，有个第三方公司服务启动后，访问的时候总是报数据库连接失败。由于是第三方服务，没法增加一些日志进行观察，所以使用阿里的arthas在线诊断工具进行排查。服务部署在客户的机房中，不允许连接外部网络，所以手动下载arthas-boot.jar并通过scp方式上传到目标机器的方式去运行。]]></summary></entry><entry><title type="html">Linux时间/时区设置</title><link href="https://loji44.github.io/2020/07/27/timezone-settings.html" rel="alternate" type="text/html" title="Linux时间/时区设置" /><published>2020-07-27T06:08:45+00:00</published><updated>2020-07-27T06:08:45+00:00</updated><id>https://loji44.github.io/2020/07/27/timezone-settings</id><content type="html" xml:base="https://loji44.github.io/2020/07/27/timezone-settings.html"><![CDATA[<p>Linux中设置时间为东八区时间（北京时间）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'Asia/Shanghai'</span> <span class="o">&gt;</span> /etc/timezone
<span class="nv">$ </span><span class="nb">date</span> <span class="nt">-R</span>
Mon, 27 Jul 2020 14:12:04 +0800
</code></pre></div></div>

<p>/etc/localtime文件描述的是本机时间；/etc/timezone文件描述的是本机所属的时区。/usr/share/zoneinfo目录下面存放的是全球各个时区/时间的文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> /usr/share/zoneinfo
Africa      Atlantic   Chile    Eire     Factory  GMT-0      Iceland      Jamaica            
America     Australia  CST6CDT  EST      GB       GMT+0      Indian       Japan             
Antarctica  Brazil     Cuba     EST5EDT  GB-Eire  Greenwich  Iran         Kwajalein
...
</code></pre></div></div>

<p>有时候在构建Docker镜像的时候，运行之后发现时间是UTC时间。这时可以在<code class="language-plaintext highlighter-rouge">Dockerfile</code>文件中加入以下内容来设置镜像运行时的时区为东八区：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RUN <span class="nb">ln</span> <span class="nt">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN <span class="nb">echo</span> <span class="s1">'Asia/Shanghai'</span> <span class="o">&gt;</span> /etc/timezone
</code></pre></div></div>

<p>如果是Java应用，通过<code class="language-plaintext highlighter-rouge">echo 'Asia/Shanghai' &gt; /etc/timezone</code>已经正确设置了时区为东八区，那么代码里面就不需要对时区进行设置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TimeZone</span> <span class="n">timeZone</span> <span class="o">=</span> <span class="nc">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">"Asia/Shanghai"</span><span class="o">);</span>
<span class="nc">TimeZone</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="n">timeZone</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p>参考：</p>
<ul>
  <li><a href="https://blog.csdn.net/alinyua/article/details/80944543">https://blog.csdn.net/alinyua/article/details/80944543</a></li>
</ul>]]></content><author><name>PandaQ</name></author><category term="Linux" /><summary type="html"><![CDATA[Linux中设置时间为东八区时间（北京时间）：]]></summary></entry><entry><title type="html">Redis持久化之rdb和aof</title><link href="https://loji44.github.io/2020/06/01/redis-persistence.html" rel="alternate" type="text/html" title="Redis持久化之rdb和aof" /><published>2020-06-01T12:14:31+00:00</published><updated>2020-06-01T12:14:31+00:00</updated><id>https://loji44.github.io/2020/06/01/redis-persistence</id><content type="html" xml:base="https://loji44.github.io/2020/06/01/redis-persistence.html"><![CDATA[<p>Redis虽然是内存数据库，但是为了一定程度的数据可靠性也做了一些持久化的方案，确保Redis机器宕机或者断电重启之后，能从备份数据中恢复宕机、掉电前的数据。</p>

<p>Redis目前有两种持久化方案：RDB持久化和AOF持久化。</p>

<h3 id="1-redis-rdb持久化">1. Redis RDB持久化</h3>

<p>RDB全称是Redis DataBase。是Redis最早支持的一种持久化方式，也是Redis默认的持久化方案。</p>

<p>RDB持久化是一种生成「快照」数据的方式，它会根据配置文件（<code class="language-plaintext highlighter-rouge">redis.conf</code>）中的持久化策略在合适的时机自动去dump整个Redis服务器在「某个时刻」的中的全量内存数据，即某个时刻的快照数据。并将快照数据保存在一个名叫<code class="language-plaintext highlighter-rouge">dump.rdb</code>的文件中，这些快照数据以二进制格式压缩存储。</p>

<h5 id="11-rdb持久化策略配置">1.1 RDB持久化策略配置</h5>

<p>我们可以在Redis服务器的配置文件中以<code class="language-plaintext highlighter-rouge">save</code>指令配置RDB持久化策略，如下所示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># redis.conf
# save &lt;seconds&gt; &lt;changes&gt;

save 900 1     # 900秒（15分钟）内，如果至少有一个key被更改则触发RDB
save 300 10    # 300秒（5分钟）内，如果至少有一个key被更改则触发RDB
save 60 10000  # 60秒内，如果至少发生10000个key被更改则触发RDB
</code></pre></div></div>

<p>如果想关闭RDB持久化，只需要将配置文件中的save配置项改成：<code class="language-plaintext highlighter-rouge">save ""</code>即可：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># redis.conf
# save &lt;seconds&gt; &lt;changes&gt;

save ""  # save "" 表示关闭RDB持久化
</code></pre></div></div>

<h5 id="12-rdb持久化手动触发执行">1.2 RDB持久化手动触发执行</h5>

<p>写在redis.conf文件中的<code class="language-plaintext highlighter-rouge">save &lt;seconds&gt; &lt;changes&gt;</code>配置项可以让Redis自动触发RDB持久化。但是有时候我们也可能需要手动触发一下RDB持久化，这时候可以使用以下两条Redis命令：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SAVE</code>：SAVE命令直接在当前Redis进程中执行RDB持久化操作，会阻塞掉来自客户端的所有请求，直到RDB持久化完成。<strong>生产环境慎用！</strong></li>
  <li><code class="language-plaintext highlighter-rouge">BGSAVE</code>：BGSAVE命令会调用fork创建一个子进程来进行RDB持久化操作。fork完毕之后，子进程会在后台进行RDB持久化，不会影响Redis主进程处理客户端的请求。</li>
</ul>

<blockquote>
  <p>生产环境手动触发RDB持久化，首选BGSAVE命令。若BGSAVE产生的后台子进程出现问题时，则可以考虑用SAVE命令来兜底。</p>
</blockquote>

<h5 id="13-rdb快照数据的恢复">1.3 RDB快照数据的恢复</h5>

<p>Redis启动时，若发现数据目录下有<code class="language-plaintext highlighter-rouge">dump.rdb</code>文件就会自动加载该文件中的数据内容到内存中。</p>

<p><img src="/static/image/2020/rdb-load.png" alt="rdb-load.png" /></p>

<p><code class="language-plaintext highlighter-rouge">dump.rdb</code>记录的就是某个时刻Redis服务器内存中的全量物理数据，并以二进制格式压缩存储。所以加载到内存也就完成了数据的恢复。</p>

<h5 id="14-rdb持久化方式总结">1.4 RDB持久化方式总结</h5>

<p>RDB持久化方式关注点在于<strong>快照数据</strong>，每次触发RDB持久化都是全量保存某个时间点上的所有内存数据。就这一点而言，它很适合备份场景，用于灾难恢复。它有如下优点：</p>

<ul>
  <li>RDB持久化生成的<code class="language-plaintext highlighter-rouge">dump.rdb</code>文件是一个经过压缩的紧凑的二进制文件，加载/恢复速度很快。</li>
</ul>

<p>RDB持久化也有缺点：</p>

<ul>
  <li>没法做到实时/秒级持久化，因为每次RDB持久化都会fork一个子进程来生成快照数据，fork属于重量级操作，频繁fork会让cpu和内存吃不消，影响Redis性能。</li>
</ul>

<h3 id="2-redis-aof持久化">2. Redis AOF持久化</h3>

<p>Redis <code class="language-plaintext highlighter-rouge">v1.1</code>开始支持另一种持久化方式：AOF（<code class="language-plaintext highlighter-rouge">Append-only File</code>）。相比RDB持久化记录物理数据的方式，AOF文件记录的不是物理数据，而是记录Redis中的每条<strong>写命令</strong>，例如<code class="language-plaintext highlighter-rouge">SET</code>，<code class="language-plaintext highlighter-rouge">DEL</code>等。每当有写操作发生，这个写操作的命令会被追加到AOF文件中：<code class="language-plaintext highlighter-rouge">appendonly.aof</code>。</p>

<p>我们可以这么理解：RDB记录的是物理日志，AOF记录的是逻辑日志，是一条条Redis写操作命令。</p>

<blockquote>
  <p>这个有点类似MySQL中的redo log和binlog。redo log记录的也是物理日志，binlog记录的是一条条SQL，是逻辑日志。</p>
</blockquote>

<h5 id="21-aof持久化策略配置">2.1 AOF持久化策略配置</h5>

<p>Redis默认不开启AOF持久化，我们需要在<code class="language-plaintext highlighter-rouge">redis.conf</code>配置文件中配置<code class="language-plaintext highlighter-rouge">appendonly yes</code>来开启：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># redis.conf
appendonly yes        # yes表示开启AOF持久化；no表示关闭AOF持久化
appendfsync everysec  # AOF持久化策略：no、always、everysec
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">appendfsync</code>参数对Redis的性能有着重要的影响：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">always</code>：每次写操作都会调用fsync将写操作命令同步到磁盘的<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件中，这种方式性能最差，但是数据可靠性最强；</li>
  <li><code class="language-plaintext highlighter-rouge">no</code>：每次Redis写操作后不会主动调用fsync同步到磁盘，只是写入缓冲区，由操作系统内核自动将缓冲区数据持久化到磁盘。Linux内核默认以每「30秒/次」的频率将文件缓冲区的数据刷新到磁盘。这种方式性能最好，但是数据可靠性最差；</li>
  <li><code class="language-plaintext highlighter-rouge">everysec</code>：everysec是权衡了性能和数据可靠性之后的一种折衷方式，即由Redis后台线程每秒调用fsync将缓冲区数据持久化到磁盘。这种方式兼顾了性能和数据的可靠性，是AOF默认的配置方式。采用这种方式，遇到宕机或者掉电我们最多丢失1秒的数据。</li>
</ul>

<h5 id="22-aof数据的加载恢复">2.2 AOF数据的加载恢复</h5>

<p>如果同时开启RDB和AOF持久化，即数据目录中会同时存在<code class="language-plaintext highlighter-rouge">dump.rdb</code>和<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件，Redis在启动的时候会优先使用<code class="language-plaintext highlighter-rouge">appendonly.aof</code>来恢复数据，因为从AOF文件中恢复的数据集是最完整也是最新的。同样，在启动日志中体现了AOF文件的加载：</p>

<p><img src="/static/image/2020/aof-load.png" alt="aof-load.png" /></p>

<p>不像RDB数据的恢复，直接load到内存即可。AOF的恢复需要读取<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件并逐条执行该文件中记录的每一条Redis命令来达到重建整个数据集的目的。如果数据集很大，那么AOF的恢复会比RDB慢很多。</p>

<p><code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件只是一个文本文件，里面记录着每次Redis的写操作命令。</p>

<p>例如我执行<code class="language-plaintext highlighter-rouge">SET test_key hello</code>之后，查看<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件内容如下所示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*2
$6
SELECT
$1
0
*3
$3
SET
$8
test_key
$5
hello
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: left">字符</th>
      <th style="text-align: left">含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">*3</td>
      <td style="text-align: left">表示此条Redis命令包含3个参数</td>
    </tr>
    <tr>
      <td style="text-align: left">$3</td>
      <td style="text-align: left">表示第一个参数的长度为3，即<code class="language-plaintext highlighter-rouge">SET</code>占用3个字符</td>
    </tr>
    <tr>
      <td style="text-align: left">$8</td>
      <td style="text-align: left">表示第二个参数的长度为8，即<code class="language-plaintext highlighter-rouge">test_key</code>占用8个字符</td>
    </tr>
    <tr>
      <td style="text-align: left">$5</td>
      <td style="text-align: left">表示第三个参数的长度为5，即<code class="language-plaintext highlighter-rouge">hello</code>占用5个字符</td>
    </tr>
  </tbody>
</table>

<p>现在我执行一个删除操作，删除刚才的key：<code class="language-plaintext highlighter-rouge">DEL test_key</code>，此时<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件内容：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*2
$6
SELECT
$1
0
*3
$3
SET
$8
test_key
$5
hello
*2
$6
SELECT
$1
0
*2
$3
DEL
$8
test_key
</code></pre></div></div>

<p>发现AOF文件除了记录我们之前的<code class="language-plaintext highlighter-rouge">SET</code>，也记录了我们的<code class="language-plaintext highlighter-rouge">DEL</code>写操作命令，这就是<code class="language-plaintext highlighter-rouge">Append-only</code>，所有的写操作命令只是追加到AOF文件中。所以当Redis宕机重启之后，加载<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件执行里面的一条条写操作命令之后，得到的数据集就是Redis宕机前的数据集，从而恢复数据。</p>

<p>若设置一个自动过期的key，AOF文件会怎样记录？例如：<code class="language-plaintext highlighter-rouge">SET ttl_key ttl_value EX 300</code>，设置<code class="language-plaintext highlighter-rouge">ttl_key</code>的过期时间为5分钟，查看<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*3
$9
PEXPIREAT
$7
ttl_key
$13
1591017706735
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">SET ttl_key ttl_value EX 300</code>命令会被转换成另一种形式记录在<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件中，变成了<code class="language-plaintext highlighter-rouge">PEXPIREAT ttl_key 1591017706735</code>。这很合理，因为当重启恢复数据后，Redis重新构建这条数据的时候可能已经过期，也就会自动删除；如果AOF不做转换而是原样记录写操作命令，那么当恢复数据的时候，就有可能会产生数据不一致。</p>

<h5 id="23-aof日志重写机制">2.3 AOF日志重写机制</h5>

<p><code class="language-plaintext highlighter-rouge">appendonly.aof</code>只是一个文本文件，而且Redis写操作命令会不断地追加到文件尾部。随着时间的推移，<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件的体积会越来越大，宕机重启恢复数据时，耗时也会越来越大。所以才有了AOF日志的重写机制。</p>

<p>所谓AOF日志重写，就是将<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件中的多条指令操作合并成一条指令的操作，节省存储空间，也节省启动恢复数据的耗时。例如，多次对同一个key执行<code class="language-plaintext highlighter-rouge">INCR</code>操作，AOF文件中也会依次记录多次<code class="language-plaintext highlighter-rouge">INCR</code>。通过AOF日志重写，针对这个key的<code class="language-plaintext highlighter-rouge">INCR</code>操作可以合并成一个<code class="language-plaintext highlighter-rouge">SET</code>操作：100次<code class="language-plaintext highlighter-rouge">INCR count_key</code>可以重写成一次<code class="language-plaintext highlighter-rouge">SET count_key 100</code>。</p>

<p>AOF日志重写能保证AOF日志文件数据的安全，如何实现数据安全呢？原理如下图所示：</p>

<p><img src="/static/image/2020/aof-rewrite-flow.png" alt="aof-rewrite-flow.png" /></p>

<ul>
  <li>主进程执行fork操作，创建一个子进程；</li>
  <li>子进程遍历内存中的数据，转换成写操作命令并写入一个临时文件；</li>
  <li>客户端的实时写命令请求，主进程还是会持久化到原来的AOF文件，<strong>同时也将写命令写入一个AOF重写内存缓存中</strong>，这样即使在重写过程中发生宕机，也能确保原来的AOF文件是安全的；</li>
  <li>子进程重写完毕，给主进程发送一个通知；主进程收到通知后，将<strong>AOF内存缓存</strong>中的写操作命令追加到这个AOF临时文件中；</li>
  <li>Redis原子地将AOF临时文件重命名为<code class="language-plaintext highlighter-rouge">appendonly.aof</code>，替换原AOF文件，完成！</li>
</ul>

<p>如何触发AOF日志重写呢？</p>

<p><strong>(1) 手动触发AOF日志重写</strong></p>

<p>在Redis <code class="language-plaintext highlighter-rouge">v2.4</code>之前，只能通过<code class="language-plaintext highlighter-rouge">BGREWRITEAOF</code>命令手动触发AOF日志重写。</p>

<p><img src="/static/image/2020/aof-rewrite.png" alt="aof-rewrite.png" /></p>

<p>查看<code class="language-plaintext highlighter-rouge">appendonly.aof</code>文件发现重写之后，文件出现了<code class="language-plaintext highlighter-rouge">REDIS0009ú redis-ver^E5.0.5ú</code>字符，跟<code class="language-plaintext highlighter-rouge">dump.rdb</code>中的字符一样，说明AOF重写会对文件内容进行压缩存储。</p>

<p><strong>(2) <code class="language-plaintext highlighter-rouge">redis.conf</code>配置AOF自动重写策略</strong></p>

<p>Redis <code class="language-plaintext highlighter-rouge">v2.4</code>及之后的版本可以通过配置文件来配置AOF日志自动重写的策略。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># redis.conf
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">auto-aof-rewrite-percentage</code>：Redis会记录上一次AOF重写之后的文件大小（如果没有执行过AOF重写，那么以Redis重启后AOF文件大小为基准），如果发现AOF文件当前大小大于上一次文件大小的指定百分比，例如上一次重写之后文件大小为<code class="language-plaintext highlighter-rouge">100MB</code>，指定百分比为<code class="language-plaintext highlighter-rouge">100%</code>，那么当前文件大小大于<code class="language-plaintext highlighter-rouge">100MB + 100MB*100% = 200MB</code>的时候，就会触发AOF重写；</li>
  <li><code class="language-plaintext highlighter-rouge">auto-aof-rewrite-min-size</code>：这个参数是指定触发AOF重写的AOF文件大小的最小值，超过这个值才会触发AOF重写；如果AOF文件大小小于这个值，就算超过了<code class="language-plaintext highlighter-rouge">auto-aof-rewrite-percentage</code>百分比，也不会触发重写。</li>
</ul>

<h5 id="24-aof日志文件损坏怎么办">2.4 AOF日志文件损坏怎么办？</h5>

<p>Redis在运行过程中可能会遇到突发的宕机、停电，如果这时候正在写AOF文件，就有可能没写完成，发生文件损坏（corrupt）。Redis在重启之后，发现AOF文件损坏会拒绝加载这个AOF文件。这个时候可以这样做：</p>

<ul>
  <li>先为现有的AOF文件创建一个备份，备份很重要；</li>
  <li>使用Redis自带的程序工具<code class="language-plaintext highlighter-rouge">redis-check-aof</code>对损坏的AOF文件进行修复：<code class="language-plaintext highlighter-rouge">redis-check-aof --fix appendonly.aof</code>；</li>
  <li>（可选）使用<code class="language-plaintext highlighter-rouge">diff -u</code>对比修复后的文件和原始文件的备份，查看两个文件之间的不同之处；</li>
  <li>重启Redis，等待Redis重新加载AOF文件进行数据恢复。</li>
</ul>

<h5 id="25-aof持久化方式总结">2.5 AOF持久化方式总结</h5>

<p>AOF持久化保存的是一种逻辑日志，即记录的是一条条写操作的命令，而不是像RDB持久化那样记录物理数据。它在恢复数据的时候，是直接执行AOF文件中的一条条Redis命令来重建整个数据集的。</p>

<p>AOF持久化的优点：</p>

<ul>
  <li>能够做到实时/秒级别的持久化，数据的实时性更好。</li>
</ul>

<p>AOF持久化优点：</p>

<ul>
  <li>AOF文件体积会比RDB大，如果数据集很大，AOF重写和AOF文件加载/恢复都将是一个很耗资源和耗时的操作。</li>
</ul>

<h3 id="3-写在最后">3. 写在最后</h3>

<p>Redis的两种持久化方式各有特色，我们生产环境一般不会只用其中一种，而是同时使用两种。</p>

<p>例如RDB可以结合<code class="language-plaintext highlighter-rouge">cron</code>定时任务去定期生成备份数据，用于灾难恢复；同时，AOF因为支持实时持久化，它记录的数据集是最实时的，所以我们也会同时开启AOF持久化，应对一些对数据实时完整性要求较高的场景。但是AOF也可能会损坏无法修复，所以两种方式并用对数据才是最安全的。</p>

<hr />]]></content><author><name></name></author><category term="Redis" /><summary type="html"><![CDATA[Redis虽然是内存数据库，但是为了一定程度的数据可靠性也做了一些持久化的方案，确保Redis机器宕机或者断电重启之后，能从备份数据中恢复宕机、掉电前的数据。]]></summary></entry></feed>